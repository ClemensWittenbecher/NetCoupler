% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize-estimates.R
\name{nc_classify_effects}
\alias{nc_classify_effects}
\alias{nc_filter_estimates}
\title{Classify direct, ambiguous, or no effect between exposure and network nodes.}
\usage{
nc_classify_effects(.tbl)

nc_filter_estimates(.tbl)
}
\arguments{
\item{.tbl}{Multi-model estimates generated from \code{\link[=nc_exposure_estimates]{nc_exposure_estimates()}} or
\code{\link[=nc_outcome_estimates]{nc_outcome_estimates()}} that contain the model summaries.}
}
\value{
Outputs a \link[tibble:tibble-package]{tibble} with model estimates
between the exposure and the individual index network nodes, along with the
classification of direct effect or not.
}
\description{
\lifecycle{experimental}

Using the output of the \code{\link[=nc_exposure_estimates]{nc_exposure_estimates()}} or \code{\link[=nc_outcome_estimates]{nc_outcome_estimates()}},
classify whether the exposure variable has a direct, ambiguous, or no link
with the index node metabolic variable, conditional on neighbouring metablic
variables and on potential confounders.
}
\section{Functions}{
\itemize{
\item \code{nc_filter_estimates}: Filter out estimates so only exposure
estimates are kept. Adds a column with the neighbouring metabolite
variables listed.
}}

\examples{

library(dplyr)
metabolite_network <- simulated_data \%>\%
  select(matches("metabolite")) \%>\%
  nc_create_network()
multimodel_exposure <- simulated_data \%>\%
  mutate(Random = rnorm(nrow(.)),
         Sex = sample(rep(c("F", "M"), times = nrow(.) / 2))) \%>\%
  nc_exposure_estimates(
    .graph = metabolite_network,
    .exposure = "exposure",
    .adjustment_vars = c("age", "Random", "Sex"),
    .model_function = lm
   )

nc_filter_estimates(multimodel_exposure)
nc_classify_effects(multimodel_exposure)

library(survival)
multimodel_outcome <- simulated_data \%>\%
  mutate(Random = rnorm(nrow(.))) \%>\%
  nc_outcome_estimates(
    .graph = metabolite_network,
    .outcome = "survival::Surv(survival_time, case_status)",
    .adjustment_vars = c("age", "Random"),
    .model_function = survival::coxph,
    .exponentiate = TRUE
   )

nc_filter_estimates(multimodel_outcome)
nc_classify_effects(multimodel_outcome)

}
\seealso{
See the \code{vignette("description")} for a
detailed description of the algorithm used to classify direct effects.
}
